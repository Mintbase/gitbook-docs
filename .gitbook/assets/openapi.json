{
  "openapi": "3.0.0",
  "info": {
    "version": "",
    "title": "Rest Endpoints",
    "description": "This OpenAPI specification is automatically generated by Hasura."
  },
  "paths": {
    "/api/rest/stores": {
      "get": {
        "summary": "Fetch All Stores",
        "description": "paginated\n***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery FetchAllStores($limit: Int = 2000, $offset: Int = 0) {\n  store(limit: $limit, offset: $offset) {\n    id\n    name\n    symbol\n    baseUri\n    owner\n    createdAt\n    minters {\n      account\n      enabled\n    }\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          {
            "schema": { "default": 0, "type": "integer" },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": { "default": 2000, "type": "integer" },
            "in": "query",
            "name": "limit"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "offset": {
                    "default": 0,
                    "type": "integer",
                    "nullable": true
                  },
                  "limit": {
                    "default": 2000,
                    "type": "integer",
                    "nullable": true
                  }
                }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "store": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "createdAt": { "title": "timestamptz" },
                          "baseUri": { "title": "String", "type": "string" },
                          "symbol": { "title": "String", "type": "string" },
                          "owner": { "title": "String", "type": "string" },
                          "name": { "title": "String", "type": "string" },
                          "minters": {
                            "items": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "title": "Boolean",
                                  "type": "boolean"
                                },
                                "account": {
                                  "title": "String",
                                  "type": "string"
                                }
                              }
                            },
                            "type": "array",
                            "nullable": false
                          },
                          "id": { "title": "String", "type": "string" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/stores"
          }
        }
      }
    },
    "/api/rest/stores/{id}": {
      "get": {
        "summary": "Fetch Store by Id",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery FetchStore($id: String!, $limit: Int = 10, $offset: Int = 0) {\n  store(where: {id: {_eq: $id}}) {\n    id\n    name\n    symbol\n    baseUri\n    owner\n    minters {\n      account\n      enabled\n    }\n    things(limit: $limit, offset: $offset) {\n      id\n      memo\n      metaId\n      tokens_aggregate {\n        aggregate {\n          count\n        }\n      }\n      tokens(limit: 5, offset: 0) {\n        id\n        minter\n        royaltys {\n          account\n          percent\n        }\n        splits {\n          account\n          percent\n        }\n      }\n    }\n    minters_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n  earnings_aggregate(where: {list: {token: {storeId: {_eq: $id}}}}) {\n    aggregate {\n      sum {\n        amount\n      }\n    }\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          {
            "schema": { "default": 0, "type": "integer" },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "id",
            "description": "_\"id\" is required (enter it either in parameters or request body)_"
          },
          {
            "schema": { "default": 10, "type": "integer" },
            "in": "query",
            "name": "limit"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "offset": {
                    "default": 0,
                    "type": "integer",
                    "nullable": true
                  },
                  "id": { "type": "string", "nullable": false },
                  "limit": {
                    "default": 10,
                    "type": "integer",
                    "nullable": true
                  }
                }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "store": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "baseUri": { "title": "String", "type": "string" },
                          "symbol": { "title": "String", "type": "string" },
                          "owner": { "title": "String", "type": "string" },
                          "minters_aggregate": {
                            "type": "object",
                            "properties": {
                              "aggregate": {
                                "type": "object",
                                "properties": {
                                  "count": { "title": "Int", "type": "integer" }
                                }
                              }
                            }
                          },
                          "name": { "title": "String", "type": "string" },
                          "things": {
                            "items": {
                              "type": "object",
                              "properties": {
                                "memo": { "title": "String", "type": "string" },
                                "metaId": {
                                  "title": "String",
                                  "type": "string"
                                },
                                "tokens": {
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "royaltys": {
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "percent": {
                                              "title": "Int",
                                              "type": "integer"
                                            },
                                            "account": {
                                              "title": "String",
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "type": "array",
                                        "nullable": false
                                      },
                                      "id": {
                                        "title": "String",
                                        "type": "string"
                                      },
                                      "minter": {
                                        "title": "String",
                                        "type": "string"
                                      },
                                      "splits": {
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "percent": {
                                              "title": "Int",
                                              "type": "integer"
                                            },
                                            "account": {
                                              "title": "String",
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "type": "array",
                                        "nullable": false
                                      }
                                    }
                                  },
                                  "type": "array",
                                  "nullable": false
                                },
                                "id": { "title": "String", "type": "string" },
                                "tokens_aggregate": {
                                  "type": "object",
                                  "properties": {
                                    "aggregate": {
                                      "type": "object",
                                      "properties": {
                                        "count": {
                                          "title": "Int",
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "type": "array",
                            "nullable": false
                          },
                          "minters": {
                            "items": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "title": "Boolean",
                                  "type": "boolean"
                                },
                                "account": {
                                  "title": "String",
                                  "type": "string"
                                }
                              }
                            },
                            "type": "array",
                            "nullable": false
                          },
                          "id": { "title": "String", "type": "string" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    },
                    "earnings_aggregate": {
                      "type": "object",
                      "properties": {
                        "aggregate": {
                          "type": "object",
                          "properties": {
                            "sum": {
                              "type": "object",
                              "properties": { "amount": { "title": "numeric" } }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/stores/{id}"
          }
        }
      }
    },
    "/api/rest/approvals": {
      "get": {
        "summary": "Fetch All Approvals",
        "description": "paginated\n***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery FetchApprovals ($limit: Int = 20, $offset: Int = 0) {\n  approvals (limit: $limit, offset: $offset) {\n    id\n    accountId\n    createdAt\n    tokenKey\n    txId\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          {
            "schema": { "default": 0, "type": "integer" },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": { "default": 20, "type": "integer" },
            "in": "query",
            "name": "limit"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "offset": {
                    "default": 0,
                    "type": "integer",
                    "nullable": true
                  },
                  "limit": {
                    "default": 20,
                    "type": "integer",
                    "nullable": true
                  }
                }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "approvals": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "tokenKey": { "title": "String", "type": "string" },
                          "createdAt": { "title": "timestamptz" },
                          "accountId": { "title": "String", "type": "string" },
                          "id": { "title": "String", "type": "string" },
                          "txId": { "title": "String", "type": "string" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/approvals"
          }
        }
      }
    },
    "/api/rest/things": {
      "get": {
        "summary": "Fetch All Things",
        "description": "paginated\n***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery FetchAllThings($limit: Int = 20, $offset: Int = 0) {\n  thing(limit: $limit, offset: $offset) {\n    id\n    memo\n    metaId\n    storeId\n    tokens {\n      id\n      ownerId\n    }\n    store {\n      baseUri\n      owner\n    }\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          {
            "schema": { "default": 0, "type": "integer" },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": { "default": 20, "type": "integer" },
            "in": "query",
            "name": "limit"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "offset": {
                    "default": 0,
                    "type": "integer",
                    "nullable": true
                  },
                  "limit": {
                    "default": 20,
                    "type": "integer",
                    "nullable": true
                  }
                }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "thing": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "memo": { "title": "String", "type": "string" },
                          "storeId": { "title": "String", "type": "string" },
                          "metaId": { "title": "String", "type": "string" },
                          "tokens": {
                            "items": {
                              "type": "object",
                              "properties": {
                                "ownerId": {
                                  "title": "String",
                                  "type": "string"
                                },
                                "id": { "title": "String", "type": "string" }
                              }
                            },
                            "type": "array",
                            "nullable": false
                          },
                          "store": {
                            "type": "object",
                            "properties": {
                              "baseUri": {
                                "title": "String",
                                "type": "string"
                              },
                              "owner": { "title": "String", "type": "string" }
                            }
                          },
                          "id": { "title": "String", "type": "string" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/things"
          }
        }
      }
    },
    "/api/rest/things/{id}": {
      "get": {
        "summary": "Fetch Thing",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery FetchThing($id: String!) {\n  thing(where: {id: {_eq: $id}}) {\n    id\n    memo\n    metaId\n    storeId\n    metadata {\n        title\n        description\n        media\n        media_hash\n        animation_hash\n        animation_url\n        youtube_url\n        document\n        document_hash\n        extra\n        external_url\n        category\n        type\n        visibility\n        media_type\n        animation_type\n        tags\n        media_size\n        animation_size\n      }\n\n    tokens {\n      id\n      ownerId\n    }\n    store {\n      baseUri\n      owner\n    }\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "id",
            "description": "_\"id\" is required (enter it either in parameters or request body)_"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "id": { "type": "string", "nullable": false } }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "thing": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "memo": { "title": "String", "type": "string" },
                          "storeId": { "title": "String", "type": "string" },
                          "metaId": { "title": "String", "type": "string" },
                          "tokens": {
                            "items": {
                              "type": "object",
                              "properties": {
                                "ownerId": {
                                  "title": "String",
                                  "type": "string"
                                },
                                "id": { "title": "String", "type": "string" }
                              }
                            },
                            "type": "array",
                            "nullable": false
                          },
                          "store": {
                            "type": "object",
                            "properties": {
                              "baseUri": {
                                "title": "String",
                                "type": "string"
                              },
                              "owner": { "title": "String", "type": "string" }
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "properties": {
                              "animation_url": {
                                "title": "String",
                                "type": "string"
                              },
                              "extra": { "title": "jsonb" },
                              "category": {
                                "title": "String",
                                "type": "string"
                              },
                              "visibility": {
                                "title": "String",
                                "type": "string"
                              },
                              "youtube_url": {
                                "title": "String",
                                "type": "string"
                              },
                              "media_hash": {
                                "title": "String",
                                "type": "string"
                              },
                              "animation_type": {
                                "title": "String",
                                "type": "string"
                              },
                              "external_url": {
                                "title": "String",
                                "type": "string"
                              },
                              "media": { "title": "String", "type": "string" },
                              "animation_size": { "title": "bigint" },
                              "document": {
                                "title": "String",
                                "type": "string"
                              },
                              "document_hash": {
                                "title": "String",
                                "type": "string"
                              },
                              "title": { "title": "String", "type": "string" },
                              "type": { "title": "String", "type": "string" },
                              "media_type": {
                                "title": "String",
                                "type": "string"
                              },
                              "animation_hash": {
                                "title": "String",
                                "type": "string"
                              },
                              "media_size": { "title": "bigint" },
                              "description": {
                                "title": "String",
                                "type": "string"
                              },
                              "tags": { "title": "jsonb" }
                            }
                          },
                          "id": { "title": "String", "type": "string" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/things/{id}"
          }
        }
      }
    },
    "/api/rest/lists": {
      "get": {
        "summary": "Fetch All Lists",
        "description": "paginated\n***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery getListedItemsTree($limit: Int = 20, $offset: Int = 0) {\n  list(limit: $limit, offset: $offset, where: {_and: {removedAt: {_is_null: true}, groupId: {}}}) {\n    createdAt\n    price\n    tokenKey\n    acceptedOfferId\n    removedAt\n    ownerId\n    contractId\n    token {\n      id\n      thingId\n      minter\n      ownerId\n      royaltyPercent\n      splits {\n        account\n        percent\n      }\n      royaltys {\n        account\n        percent\n      }\n      store {\n        id\n        name\n        owner\n        createdAt\n        things(limit: 5) {\n          id\n          metaId\n        }\n      }\n    }\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          {
            "schema": { "default": 0, "type": "integer" },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": { "default": 20, "type": "integer" },
            "in": "query",
            "name": "limit"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "offset": {
                    "default": 0,
                    "type": "integer",
                    "nullable": true
                  },
                  "limit": {
                    "default": 20,
                    "type": "integer",
                    "nullable": true
                  }
                }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "list": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "tokenKey": { "title": "String", "type": "string" },
                          "removedAt": { "title": "timestamptz" },
                          "contractId": { "title": "String", "type": "string" },
                          "createdAt": { "title": "timestamptz" },
                          "token": {
                            "type": "object",
                            "properties": {
                              "royaltys": {
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "percent": {
                                      "title": "Int",
                                      "type": "integer"
                                    },
                                    "account": {
                                      "title": "String",
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array",
                                "nullable": false
                              },
                              "ownerId": {
                                "title": "String",
                                "type": "string"
                              },
                              "store": {
                                "type": "object",
                                "properties": {
                                  "createdAt": { "title": "timestamptz" },
                                  "owner": {
                                    "title": "String",
                                    "type": "string"
                                  },
                                  "name": {
                                    "title": "String",
                                    "type": "string"
                                  },
                                  "things": {
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "metaId": {
                                          "title": "String",
                                          "type": "string"
                                        },
                                        "id": {
                                          "title": "String",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "type": "array",
                                    "nullable": false
                                  },
                                  "id": { "title": "String", "type": "string" }
                                }
                              },
                              "royaltyPercent": {
                                "title": "Int",
                                "type": "integer"
                              },
                              "id": { "title": "String", "type": "string" },
                              "minter": { "title": "String", "type": "string" },
                              "splits": {
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "percent": {
                                      "title": "Int",
                                      "type": "integer"
                                    },
                                    "account": {
                                      "title": "String",
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array",
                                "nullable": false
                              },
                              "thingId": { "title": "String", "type": "string" }
                            }
                          },
                          "ownerId": { "title": "String", "type": "string" },
                          "acceptedOfferId": {
                            "title": "String",
                            "type": "string"
                          },
                          "price": { "title": "numeric" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/lists"
          }
        }
      }
    },
    "/api/rest/lists/{id}": {
      "get": {
        "summary": "Fetch List",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery getListedItemsTree($id: String!) {\n  list(where: {_and: {groupId: {_eq: $id}, removedAt: {_is_null: true}}}, limit: 1) {\n    createdAt\n    price\n    tokenKey\n    acceptedOfferId\n    removedAt\n    ownerId\n    contractId\n    token {\n      id\n      thingId\n      minter\n      ownerId\n      royaltyPercent\n      splits {\n        account\n        percent\n      }\n      royaltys {\n        account\n        percent\n      }\n      store {\n        id\n        name\n        owner\n        createdAt\n        things(limit: 5) {\n          id\n          metaId\n        }\n      }\n    }\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "id",
            "description": "_\"id\" is required (enter it either in parameters or request body)_"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "id": { "type": "string", "nullable": false } }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "list": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "tokenKey": { "title": "String", "type": "string" },
                          "removedAt": { "title": "timestamptz" },
                          "contractId": { "title": "String", "type": "string" },
                          "createdAt": { "title": "timestamptz" },
                          "token": {
                            "type": "object",
                            "properties": {
                              "royaltys": {
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "percent": {
                                      "title": "Int",
                                      "type": "integer"
                                    },
                                    "account": {
                                      "title": "String",
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array",
                                "nullable": false
                              },
                              "ownerId": {
                                "title": "String",
                                "type": "string"
                              },
                              "store": {
                                "type": "object",
                                "properties": {
                                  "createdAt": { "title": "timestamptz" },
                                  "owner": {
                                    "title": "String",
                                    "type": "string"
                                  },
                                  "name": {
                                    "title": "String",
                                    "type": "string"
                                  },
                                  "things": {
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "metaId": {
                                          "title": "String",
                                          "type": "string"
                                        },
                                        "id": {
                                          "title": "String",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "type": "array",
                                    "nullable": false
                                  },
                                  "id": { "title": "String", "type": "string" }
                                }
                              },
                              "royaltyPercent": {
                                "title": "Int",
                                "type": "integer"
                              },
                              "id": { "title": "String", "type": "string" },
                              "minter": { "title": "String", "type": "string" },
                              "splits": {
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "percent": {
                                      "title": "Int",
                                      "type": "integer"
                                    },
                                    "account": {
                                      "title": "String",
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array",
                                "nullable": false
                              },
                              "thingId": { "title": "String", "type": "string" }
                            }
                          },
                          "ownerId": { "title": "String", "type": "string" },
                          "acceptedOfferId": {
                            "title": "String",
                            "type": "string"
                          },
                          "price": { "title": "numeric" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/lists/{id}"
          }
        }
      }
    },
    "/api/rest/dappradar/top-stores": {
      "get": {
        "summary": "Get Top Store",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery GetTopStore {\n  mb_views_top_stores {\n    name\n    owner\n    store_id\n    total\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "mb_views_top_stores": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "store_id": { "title": "String", "type": "string" },
                          "owner": { "title": "String", "type": "string" },
                          "name": { "title": "String", "type": "string" },
                          "total": { "title": "numeric" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/dappradar/top-stores"
          }
        }
      }
    },
    "/api/rest/marketplace": {
      "get": {
        "summary": "Fetch Marketplace",
        "description": "paginated\n***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery getMyListed($limit: Int = 20, $offset: Int = 0) {\n    list(\n      distinct_on: groupId\n      order_by: { groupId: desc }\n      limit: $limit\n      offset: $offset\n      where: { removedAt: { _is_null: true } }\n    ) {\n      id\n      price\n      groupId\n      ownerId\n      createdAt\n      token {\n        thing {\n          id\n          metaId\n          store {\n            baseUri\n          }\n        }\n        splits {\n          id\n          account\n          txId\n        }\n        royaltys {\n          id\n          account\n          txId\n        }\n      }\n    }\n  }\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          {
            "schema": { "default": 0, "type": "integer" },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": { "default": 20, "type": "integer" },
            "in": "query",
            "name": "limit"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "offset": {
                    "default": 0,
                    "type": "integer",
                    "nullable": true
                  },
                  "limit": {
                    "default": 20,
                    "type": "integer",
                    "nullable": true
                  }
                }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "list": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "createdAt": { "title": "timestamptz" },
                          "token": {
                            "type": "object",
                            "properties": {
                              "thing": {
                                "type": "object",
                                "properties": {
                                  "metaId": {
                                    "title": "String",
                                    "type": "string"
                                  },
                                  "store": {
                                    "type": "object",
                                    "properties": {
                                      "baseUri": {
                                        "title": "String",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "id": { "title": "String", "type": "string" }
                                }
                              },
                              "royaltys": {
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "account": {
                                      "title": "String",
                                      "type": "string"
                                    },
                                    "id": {
                                      "title": "String",
                                      "type": "string"
                                    },
                                    "txId": {
                                      "title": "String",
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array",
                                "nullable": false
                              },
                              "splits": {
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "account": {
                                      "title": "String",
                                      "type": "string"
                                    },
                                    "id": {
                                      "title": "String",
                                      "type": "string"
                                    },
                                    "txId": {
                                      "title": "String",
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array",
                                "nullable": false
                              }
                            }
                          },
                          "ownerId": { "title": "String", "type": "string" },
                          "groupId": { "title": "String", "type": "string" },
                          "id": { "title": "String", "type": "string" },
                          "price": { "title": "numeric" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/marketplace"
          }
        }
      }
    },
    "/api/rest/token-approvals": {
      "get": {
        "summary": "Fetch Token Approval on Contract",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery FetchTokenApprovalOnContract($accountId: String, $tokenKey: String) {\n  approvals(where: {_and: {tokenKey: {_eq: $tokenKey}, accountId: {_eq: $accountId}}}) {\n    accountId\n    createdAt\n    tokenKey\n    txId\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          { "schema": { "type": "string" }, "in": "query", "name": "tokenKey" },
          { "schema": { "type": "string" }, "in": "query", "name": "accountId" }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tokenKey": { "type": "string", "nullable": true },
                  "accountId": { "type": "string", "nullable": true }
                }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "approvals": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "tokenKey": { "title": "String", "type": "string" },
                          "createdAt": { "title": "timestamptz" },
                          "accountId": { "title": "String", "type": "string" },
                          "txId": { "title": "String", "type": "string" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/token-approvals"
          }
        }
      }
    },
    "/api/rest/accounts/{account}": {
      "get": {
        "summary": "Fetch Account",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery FetchTokensByOwner ($account: String) {\n  token(where: {ownerId: {_eq: $account}}) {\n    id\n    thing {\n      id\n    }\n  }\n  store(where: {owner: {_eq: $account}}) {\n    id\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          { "schema": { "type": "string" }, "in": "path", "name": "account" }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account": { "type": "string", "nullable": true }
                }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "thing": {
                            "type": "object",
                            "properties": {
                              "id": { "title": "String", "type": "string" }
                            }
                          },
                          "id": { "title": "String", "type": "string" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    },
                    "store": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "title": "String", "type": "string" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/accounts/{account}"
          }
        }
      }
    },
    "/api/rest/all-stores": {
      "get": {
        "summary": "Fetch all stores",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery FetchAllStores($limit: Int = 2000, $offset: Int = 0) {\n  store(limit: $limit, offset: $offset) {\n    id\n    name\n    owner\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          {
            "schema": { "default": 0, "type": "integer" },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": { "default": 2000, "type": "integer" },
            "in": "query",
            "name": "limit"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "offset": {
                    "default": 0,
                    "type": "integer",
                    "nullable": true
                  },
                  "limit": {
                    "default": 2000,
                    "type": "integer",
                    "nullable": true
                  }
                }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "store": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "owner": { "title": "String", "type": "string" },
                          "name": { "title": "String", "type": "string" },
                          "id": { "title": "String", "type": "string" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/all-stores"
          }
        }
      }
    },
    "/api/rest/tokens": {
      "get": {
        "summary": "Fetch All Tokens",
        "description": "paginated\n***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery FetchTokens($limit: Int = 20, $offset: Int = 0) {\n  token(limit: $limit, offset: $offset) {\n    id\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          {
            "schema": { "default": 0, "type": "integer" },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": { "default": 20, "type": "integer" },
            "in": "query",
            "name": "limit"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "offset": {
                    "default": 0,
                    "type": "integer",
                    "nullable": true
                  },
                  "limit": {
                    "default": 20,
                    "type": "integer",
                    "nullable": true
                  }
                }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "title": "String", "type": "string" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/tokens"
          }
        }
      }
    },
    "/api/rest/tokens/{id}": {
      "get": {
        "summary": "Fetch Token",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery FetchToken($id: String!) {\n  token(where: {id: {_eq: $id}}) {\n    id\n    ownerId\n    royaltyPercent\n    royaltys {\n      account\n      percent\n    }\n    splits {\n      id\n    }\n    thing {\n      metaId\n    }\n    store {\n      id\n      baseUri\n    }\n    createdAt\n    lastTransferred\n    burnedAt\n    minter\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "id",
            "description": "_\"id\" is required (enter it either in parameters or request body)_"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "id": { "type": "string", "nullable": false } }
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "thing": {
                            "type": "object",
                            "properties": {
                              "metaId": { "title": "String", "type": "string" }
                            }
                          },
                          "royaltys": {
                            "items": {
                              "type": "object",
                              "properties": {
                                "percent": {
                                  "title": "Int",
                                  "type": "integer"
                                },
                                "account": {
                                  "title": "String",
                                  "type": "string"
                                }
                              }
                            },
                            "type": "array",
                            "nullable": false
                          },
                          "createdAt": { "title": "timestamptz" },
                          "ownerId": { "title": "String", "type": "string" },
                          "burnedAt": { "title": "timestamptz" },
                          "store": {
                            "type": "object",
                            "properties": {
                              "baseUri": {
                                "title": "String",
                                "type": "string"
                              },
                              "id": { "title": "String", "type": "string" }
                            }
                          },
                          "royaltyPercent": {
                            "title": "Int",
                            "type": "integer"
                          },
                          "lastTransferred": { "title": "timestamptz" },
                          "id": { "title": "String", "type": "string" },
                          "minter": { "title": "String", "type": "string" },
                          "splits": {
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "title": "String", "type": "string" }
                              }
                            },
                            "type": "array",
                            "nullable": false
                          }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/tokens/{id}"
          }
        }
      }
    },
    "/api/rest/swagger-contest": {
      "get": {
        "summary": "[CAMPAIGN] SWAGGER DAO CONTEST",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery SwaggerDAOQuery {\n  thing(where: {metadata: {tags: {_has_key: \"nearconnearverse\"}}}) {\n    id\n    metadata {\n      title\n    }\n    tokens_aggregate(where: {list: {autotransfer: {_eq: true}, removedAt: {_is_null: false}}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "thing": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "metadata": {
                            "type": "object",
                            "properties": {
                              "title": { "title": "String", "type": "string" }
                            }
                          },
                          "id": { "title": "String", "type": "string" },
                          "tokens_aggregate": {
                            "type": "object",
                            "properties": {
                              "aggregate": {
                                "type": "object",
                                "properties": {
                                  "count": { "title": "Int", "type": "integer" }
                                }
                              }
                            }
                          }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/swagger-contest"
          }
        }
      }
    },
    "/api/rest/categories": {
      "get": {
        "summary": "Fetch All Categories",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery FetchAllCategories {\n  thing(distinct_on: memo) {\n    memo\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "thing": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "memo": { "title": "String", "type": "string" }
                        }
                      },
                      "type": "array",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/categories"
          }
        }
      }
    },
    "/api/rest/stats": {
      "get": {
        "summary": "Stats",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery Stats {\n  tokens_aggregate {\n    aggregate {\n      count\n    }\n  }\n  things_aggregate {\n    aggregate {\n      count\n    }\n  }\n  stores_aggregate {\n    aggregate {\n      count\n    }\n  }\n  minters_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n```",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-hasura-admin-secret",
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request."
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "minters_aggregate": {
                      "type": "object",
                      "properties": {
                        "aggregate": {
                          "type": "object",
                          "properties": {
                            "count": { "title": "Int", "type": "integer" }
                          }
                        }
                      }
                    },
                    "stores_aggregate": {
                      "type": "object",
                      "properties": {
                        "aggregate": {
                          "type": "object",
                          "properties": {
                            "count": { "title": "Int", "type": "integer" }
                          }
                        }
                      }
                    },
                    "tokens_aggregate": {
                      "type": "object",
                      "properties": {
                        "aggregate": {
                          "type": "object",
                          "properties": {
                            "count": { "title": "Int", "type": "integer" }
                          }
                        }
                      }
                    },
                    "things_aggregate": {
                      "type": "object",
                      "properties": {
                        "aggregate": {
                          "type": "object",
                          "properties": {
                            "count": { "title": "Int", "type": "integer" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/stats"
          }
        }
      }
    }
  },
  "components": {}
}
